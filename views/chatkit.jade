extends layout

block content
  .main
      .container
        .row
          .col-sm-12
            fieldset#first
              fieldset#second
                ul#message-list 
            fieldset#second     
              form#message-form           
                input#message-text(type='text')      
                input#send(type='submit') 
              .row
                .col-sm-4
                    form#roomChange
                      input(type='submit', value='next room', name='nextRoom')
                .col-sm-4
                    form#createRandom
                      input(type='submit', value='randomChat', name='randomChat')
                .col-sm-4
      script(src='https://unpkg.com/@pusher/chatkit@0.7.5/dist/web/chatkit.js')  
      script.
        const tokenProvider = new Chatkit.TokenProvider({
          url: "https://us1.pusherplatform.io/services/chatkit_token_provider/v1/81941ebe-9108-491a-9404-a72023fce067/token"
        });

        $.get('/users/whoLog').done(function(response) {
          var chatUser = response;
          const chatManager = new Chatkit.ChatManager({
            instanceLocator: "v1:us1:81941ebe-9108-491a-9404-a72023fce067",
            userId: response,//need to get user email from passport.
            tokenProvider: tokenProvider
          });

          randomUser = response;
          console.log(randomUser);

          chatManager.connect().then(currentUser => {
            var roomToken=currentUser.rooms.length-2;

            const roomChangeForm = document.getElementById("roomChange");
            roomChangeForm.addEventListener("submit", e => {

              e.preventDefault();
              if(roomToken==currentUser.rooms.length-1)
                roomToken=0;
              else
                roomToken++;

              console.log("room token: "+roomToken);

              currentUser.subscribeToRoom({
                roomId: currentUser.rooms[roomToken].id,
                hooks: {
                  onNewMessage: message => {
                    const ul = document.getElementById("message-list");
                    const li = document.createElement("li");
                    li.appendChild(
                      document.createTextNode(`(${currentUser.rooms[roomToken].name}) ${message.sender.name}: ${message.text}`)
                      );
                    ul.appendChild(li);
                    console.log("roomSubscribedTo: "+roomToken);
                  }
                }
              });
              
            });

            const newRoomForm = document.getElementById("createRandom");
            newRoomForm.addEventListener("submit", e => {
              console.log("create new room");
              e.preventDefault();
              var randomUser;
              $.get('/users/randomUser').done(function(response) {
                randomUser = response;

                currentUser.createRoom({
                  name: 'Random Chat For '+currentUser.id+" & "+randomUser,
                  private: true,
                  addUserIds: [currentUser.id, randomUser]
                }).then(room => {
                  console.log(`Created room called ${room.name}`)
                })
                .catch(err => {
                  console.log(`Error creating room ${err}`)
                })

              }); //end of $.get

            });



            console.log(currentUser.rooms);

            const form = document.getElementById("message-form");
            form.addEventListener("submit", e => {
              console.log("roomToken for sending: "+roomToken);
              e.preventDefault();
              const input = document.getElementById("message-text");
              currentUser.sendMessage({
                text: input.value,
                roomId: currentUser.rooms[roomToken].id
              });
              input.value = "";
            });



          })//end of chatmanager.connect  
          .catch(error => {
            console.error("error:", error);
          });
        });
